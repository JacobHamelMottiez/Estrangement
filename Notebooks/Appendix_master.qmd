---
title: "Bertopic with abstracts of *Biology and Philosophy* "
date: 2025-04-28
author:
  - name: Jacob Hamel-Mottiez
    id: jc
    orcid: 0000-0002-1825-0097
    email: jaham43@ulaval.ca
    affiliation: 
      - name: Laval University

abstract: 
    This file is the technical appendix for my master's thesis. 
format: 
  html:
    code-fold: true
    
keywords:
  - Philosophy of Biology
  - Biology
  - Bibliometrics
  - Topic modeling
  - BERTopic
  
execute: 
  echo: false
  warning: false
  enabled: true # This is so that Plotly is rendered. 


license: "CC BY"
copyright: 
  holder: Jacob Hamel-Mottiez
  year: 2025

funding: "The author received funding from the Social Sciences and Humanities Canadian Reseach Council (SSHCRC) as well as from the Fonds de recherche du Qu??bec - Soci??t?? et culture."

brand:
  light: "C:/Users/jacob/OneDrive - Universit\u00e9 Laval/quarto-light-dark-experiments/united-brand.yml"
  dark: "C:/Users/jacob/OneDrive - Universit\u00e9 Laval/quarto-light-dark-experiments/slate-brand.yml"
---

# What is this file about?

This file is the technical appendix for my master thesis under the supervision of Pierre-Olivier MC)thot (UL) and FranC'ois Claveau (UdS). Note that the information about how we got our data is in another file : `C:/Users/jacob/OneDrive - UniversitC) Laval/biophilo/fetch_data_2024-11-18.Rmd`.

Special thanks to FranC'ois Claveau, Pierre-Olivier MC)thot, Louis Renaud-Desjardins, Thomas Pradeu and MaC+l Lemoine for their support on this projet.

For any questions or issues, please write at [jacob.hamel-mottiez.1\@ulaval.ca](mailto:jacob.hamel-mottiez.1@ulaval.ca){.email}.

<!--# Dark theme plotly settings -->
```{r DARK THEME PLOTLY}

#| echo: false
#| warning: false

library(plotly)

plotly_brand <- function(brand_yml, title, x, y) {
  brand <- yaml::yaml.load_file(brand_yml)
  return (
    function(plot)
      plot |> layout(
        paper_bgcolor = brand$color$background,
        plot_bgcolor = brand$color$background,
        title = list(font = list(
          color = brand$color$foreground, size = 20
        )),
        # Plot title font
        xaxis = list(
          titlefont = list(color = brand$color$foreground, size = 16),
          # x-axis title font
          tickfont = list(color = brand$color$foreground, size = 14)      # x-axis tick font
        ),
        yaxis = list(
          titlefont = list(color = brand$color$foreground, size = 16),
          # y-axis title font
          tickfont = list(color = brand$color$foreground, size = 14)      # y-axis tick font
        )
      )
  )
}
      
      

united_theme <- plotly_brand('C:/Users/jacob/OneDrive - Universit\u00e9 Laval/quarto-light-dark-experiments/united-brand.yml')
slate_theme <- plotly_brand('C:/Users/jacob/OneDrive - Universit\u00e9 Laval/quarto-light-dark-experiments/slate-brand.yml')

```


<!--# Dark theme ggplot settings -->
```{r DARK THEME GGPLOT2}
ggplot_theme_colors <- function(bgcolor, fgcolor) {
  theme_minimal(base_size = 11) %+%
    theme(
      panel.border = element_blank(),
      #panel.grid.major.y = element_line(colour = fgcolor),
      panel.grid.minor.y = element_line(colour = fgcolor),
      #panel.grid.major.x = element_line(colour = fgcolor),
      panel.grid.minor.x = element_line(colour = fgcolor),
      text = element_text(colour = fgcolor),
      axis.text = element_text(colour = fgcolor),
      rect = element_rect(colour = bgcolor, fill = bgcolor),
      plot.background = element_rect(fill = bgcolor, colour = NA),
      #axis.line = element_line(colour = fgcolor),
      axis.ticks = element_line(colour = fgcolor), 
      strip.text = element_text(colour = fgcolor)
    )
}

ggplot_theme_brand <- function(brand_yml) {
  brand <- yaml::yaml.load_file(brand_yml)
  ggplot_theme_colors(brand$color$background, brand$color$foreground)
}

united_theme_gg<- ggplot_theme_brand('C:/Users/jacob/OneDrive - Universit\u00e9 Laval/quarto-light-dark-experiments/united-brand.yml')
slate_theme_gg <- ggplot_theme_brand('C:/Users/jacob/OneDrive - Universit\u00e9 Laval/quarto-light-dark-experiments/slate-brand.yml')

```

<!--# Tables setting -->
```{r}
#| echo: false
#| warning: false

gt_theme_colors <- function(bg, fg)
  (function(table)
    table |>
    tab_options(
      table.background.color=bg,
      table.font.color=fg,
    )
  )


gt_theme_brand <- function(brand_yml) {
  brand <- yaml::yaml.load_file(brand_yml)
  gt_theme_colors(brand$color$background, brand$color$foreground)
}
united_theme_gt <- gt_theme_brand('C:/Users/jacob/OneDrive - Universit\u00e9 Laval/quarto-light-dark-experiments/united-brand.yml')
slate_theme_gt <- gt_theme_brand('C:/Users/jacob/OneDrive - Universit\u00e9 Laval/quarto-light-dark-experiments/slate-brand.yml')
```

```{r GT}
interactivity  <- function(data) {
  opt_interactive(data,
  use_search = TRUE,
  use_filters = FALSE,
  use_resizers = TRUE,
  use_highlight = TRUE,
  use_compact_mode = FALSE,
  use_text_wrapping = TRUE,
  use_page_size_select = FALSE,
  page_size_default = 10,
  page_size_values = c(10, 25, 50, 100),
  pagination_type = c("numbers", "jump", "simple"),
  height = "auto"
)
}
```

```{r FUNCTIONS}
# Some functions to display nice data table and to add percentages automatically
fct_percent <- function(x) {
  dt <-  x |>  mutate(percent = n/sum(x$n, na.rm = TRUE)*100) |>
    mutate(across(percent, round, 3)) 
  dt
}

fct_DT <- function(x) {
        dt <- gt(x) |> interactivity()
        light =  dt |> united_theme_gt()
        dark =  dt |> slate_theme_gt()
}

```

# Chapter 1

*To be done*

# Chapter 2

*To be done*

# Chapter 3

```{r SETUP, include = FALSE}
package_list <- c(
  "here", # use for paths creation
  "tidyverse",
  "bib2df", # for cleaning .bib data
  "janitor", # useful functions for cleaning imported data
  "rscopus", # using Scopus API
  "biblionetwork", # creating edges
  "tidygraph", # for creating networks
  "ggraph", # plotting networks
  "devtools", 
  "DT", # for clean and interactive datatable in .rmd. 
  "countrycode", 
  "refinr",
  "data.table",
  "highcharter", 
  "igraph", 
  "d3r", 
  "wordcloud2", 
  "wordcloud",
  "lubridate",
  "RColorBrewer", 
  "gifski", 
  "patchwork",
  "particles",
  "network", 
  "plotly",
  "ggforce",
  "visNetwork",
  "scales",
  "viridis", 
  "tidygraph",
  "readxl",
  "maps",
  "igraph",
  "ggraph",
  "knitr",
  "scales", 
  "gt"
)

# FUNCTION TO INSTALL AND LOAD LIBRARIES. 
for (p in package_list) {
#  if (p %in% installed.packages() == FALSE) {
#    install.packages(p, dependencies = TRUE)
#  }
  library(p, character.only = TRUE)
}

```


## Database choice

Early in our work came an important methodological choice, namely, choosing between two well known databases : Web of Science (WoS) and Scopus. **We chose to go with Scopus**. In summary, this choice is justified by two main reasons :

1.  Scopus has a wider range of coverage when it comes to the journals we want to investigate, that is the main journals of philosophy of biology. For example, it covers *Biological Theory*, which is absent of our Web of Science database.

2.  Web of Science for philosophy is missing many citing to cited document link.

If you want in depth details about both databases and their strengths and weaknesses given our corpus, follow along. If you want to see the results, you can skip and go straight to the results section.

### Coverage across different databases : Springer, Web of Science and Scopus.

Here is how we fetch the information from the different databases.

-   For Springer, we looked manually at each volume and create an excel sheet with the number of articles per year.

-   For Web of Science we fetched the data through the Albator database which we got access to via the OST. The detailed information about the SQL query already provided earlier.

-   For Scopus, we used Scopus API and the *rscopus* package to get our data. See the code below for the specific workflow.

To compare each database coverage (Web of Science, Scopus and Springer) we will perform our tests based on the well-known *Biology & Philosophy* journal present in each database.

```{r DATA B&P WOS, cache = TRUE, include = FALSE, message=FALSE}
#DIRECTORY AND DATE 
dir_od <- "C:/Users/jacob/OneDrive - Universit\u00e9 Laval/DATA/"
date <- "2024-09-23"

# COLUMN NAMES FOR WOS DATA
ref_col <- c(
  "OST_BK",
  "UID",
  "OST_BK_Ref",
  "UID_Ref",
  "Cited_Author",
  "Year",
  "Cited_Title",
  "Cited_Work"
)

art_col <- c(
  "OST_BK",
  "citing_year",
  "UID",
  "Titre",
  "Nb_Reference",
  "Type_Document", 
  "Revue",
  "Abrev",
  "Abstract"
)

ref_auth_col <-  c(
  "OST_BK_Ref",
  "UID_Ref",
  "first_name",
  "last_name",
  "seq_no"
)

ref_abstr_col <- c(
  "OST_BK_Ref", 
  "UID_Ref", 
  "Abstract"
)
  
art_auth_col <- c(
  "OST_BK", 
  "first_name", 
  "last_name",
  "seq_no"
)

ref_cit_top_col <- c(
  "OST_BK_Ref", 
  "UID_Ref", 
  "citation_topic"
)

ref_kw_col <- c(
  "OST_BK_Ref", 
  "UID_Ref", 
  "keyword",
  "keyword_plus"
)


# DATA
## For now, we have two datasets, the journal *Biological Theory* and *Biology & Philosophy*. 
 
bio_th_db <- read_csv(paste0(dir_od, "biological_theory_bp_2024-10-7.csv")) # This is the data from Bio. Th. Springer and not Scopus. 


ref_bp <- read_delim(paste0(dir_od,
                            "bp_references_2024-09-23.csv"), delim = ";", col_names = ref_col)
art_bp <- read_delim(paste0(dir_od, 
                            "bp_articles_alt_2024-09-28.csv"),  delim = ";", col_names = art_col)
ref_auth_bp <- read_delim(paste0(dir_od,
                                 "bp_references-authors_2024-09-23.csv"), delim = ";", col_names = ref_auth_col)
art_auth_bp <- read_delim(paste0(dir_od, 
                                 "bp_articles-authors_2024-09-23.csv"),  delim = ";", col_names = art_auth_col)
ref_abstr_bp <- read_delim(paste0(dir_od,
                                  "bp_references-abstract_2024-09-23.csv"), delim = ";", col_names= ref_abstr_col)
ref_cit_top_bp <- read_delim(paste0(dir_od,
                                  "bp_references-citations-topic_2024-10_02.csv"), delim = ";", col_names = ref_cit_top_col) |> print(n = 100)

art_adresse_bp <- read_delim(paste0(dir_od,
                                  "bp_articles_adresses_2024-10-02.csv"), delim = ";") 
art_org_bp <- read_delim(paste0(dir_od,
                                  "bp_articles-organizations_2024-10-02.csv"), delim = ";") 
ref_kw_bp <- read_delim(paste0(dir_od,
                                  "bp_references-keywords_2024-10_02.csv"), delim = ";", col_names =  ref_kw_col)
link_tbl <- ref_bp |> select(OST_BK, OST_BK_Ref, Cited_Author, Cited_Title,Year) |> filter(OST_BK_Ref != "NULL")
```

```{r DATA B&P SPRINGER, message=FALSE}
bp_db <- read_csv(paste0(dir_od,"bp_article_db.csv"), skip = 1) # This is the data from B&P Springer and not WoS.
```

### *Biology and Philosophy* Articles

Let's start by making sure that we have a good coverage for articles. Unsurprisingly, the number of article listed in Springer are more numerous than in the other databases. At first sight, Web of Science seems to have a better coverage, with a difference of more than 200 articles when compared to Scopus.

```{r DATA, echo = FALSE, message = FALSE, warning = FALSE}

dir_data <-  "C:/Users/jacob/OneDrive - Universit\u00e9 Laval/biophilo/Data/"

# ARTICLES
articles_special_philo_bio_reformat <- read_csv(paste0(dir_data, "pybiblio/SPECIALIZED PHILOSOPHY OF BIOLOGY/articles_special_philo_bio_reformat.csv"))
articles_and_references_special_philo_bio <- read_csv(paste0(dir_data,"pybiblio/SPECIALIZED PHILOSOPHY OF BIOLOGY/articles_and_references_special_philo_bio.csv"))

# REFERENCES
references_special_philo_bio_reformat <- read_csv(paste0(dir_data,"pybiblio/SPECIALIZED PHILOSOPHY OF BIOLOGY/references_special_philo_bio_reformat.csv"))

```

```{r ALL DATABASES TOGHETER, echo = FALSE, message = FALSE}
# DATA FROM SPRINGER
art_springer <- bp_db |> select(YEAR, ARTICLES) |>
  distinct() 

# DATA FROM WOS (ARTICLES ONLY)
art_only_WoS <- art_bp |> 
  filter(Type_Document == "Article") |> 
  count(citing_year) |> 
  rename(YEAR = citing_year, N = n)

art_only_WoS <- art_only_WoS |> mutate(FROM = "Web of Science (Articles only)")

# DATA FROM SPRINGER
art_springer <- art_springer |> 
  rename(YEAR = YEAR, N = ARTICLES) |> 
  mutate(FROM = "Springer")

# DATA SCOPUS (ARTICLES ONLY)
art_only_scopus <- articles_special_philo_bio_reformat |> filter(citing_journal == "BIOLOGY AND PHILOSOPHY") |> select(citing_id, citing_year) |> 
  distinct() |> 
  count(citing_year) |> 
  rename(N = n,
         YEAR = citing_year) 
art_only_scopus <- art_only_scopus |> mutate(FROM = "Scopus (Articles only)")

art_all <- rbind(art_springer, art_only_WoS, art_only_scopus)
```

```{r TABLE ALL DATABASES TOGETHER}
#| renderings: [light, dark]

fct_DT(
  art_all |>
  group_by(FROM) |>
  summarise(total_N = sum(N)) |>
  arrange(desc(total_N))
)

```

Lets look at the distribution of those articles since the beginning of *Biology & Philosophy*. We see that 1) Web of Science has a good coverage except for early and recent years of *B&P* whereas Scopus do pretty well in the same range. However, Scopus seems to lose a lot of articles from the decade 1995-2005 (not shown in the histogram for visibility). However, when we filter only on articles, Scopus gets actually a better coverage overall.

```{r HISTOGRAM ALL DATABASES TOGHETER, echo = FALSE, message = FALSE}
# Plot
highchart() |>
  hc_add_series(data = art_all |> filter(FROM == "Springer" | FROM == "Web of Science (Articles only)" | FROM == "Scopus (Articles only)"),
                   type = "column", hcaes(x = YEAR,
                   y = N, 
                   group = FROM)) 
```

### *Biology and Philosophy* References

Now that we have a better idea of the articles we are able to get from both databases, lets look at their references.

For Web of Science, we uncover that many many references had no unique identifier (around 1/3 to potentially 1/2).

Here is some quantitative data :

1)  We have a total of 67 774 cited document for our B&P corpus.
2)  43 828 cited document have a Cited_Title (\~ 24 000 lost already).
3)  31 439 cited document have Cited_Title and/or an OST_BK_Ref (the OST_BK or unique identifier for a cited document, see "Cited authors (references' authors)" section of the SQL script above).

Given that this 31 439 cited document corpus doesn't contain book and book chapter which we are interested in getting, this is problematic. Compared to this important limitation, Scopus do much better.

We must thank AurC)lien Goutsmedt which made us aware of an API given by Scopus. It eased out our work substantially (for more information, see his blog [here](https://aurelien-goutsmedt.com/post/extracting-biblio-data-1/)).

Here, compared to our WoS data, we get more than 68 800 references with close to 100% match between references and articles. As a reminder we had around 64 000 references when going through WoS and almost 1/3 of them had no link to their respective article (in the histogram, see the Cited_ID comparison).

```{r COMPLETENESS OF DATA B&P WEB OF SCIENCE, message = FALSE, warning = FALSE}
# Completeness of data -----------------------------------------------------
df <- tibble(ref_bp) |> mutate(across(where(is.character), ~ na_if(., "NULL")))

df <-  df |> rename(Citing_ID = OST_BK, Cited_ID = OST_BK_Ref, Cited_Year = Year)

# Create a tibble summarizing total rows, NA values, and non-NA values by column
summary_tibble <- tibble(
  column = names(df),
  total_rows = nrow(df),
  na_count = sapply(df, function(x)
    sum(is.na(x))),
  non_na_count = sapply(df, function(x)
    sum(!is.na(x)))
)

summary_tibble <-  summary_tibble |>  
  mutate(percent = non_na_count / total_rows *100) |> 
  mutate(across(percent, round, 3)) |>
  arrange(desc(percent))

summary_tibble_WoS <- summary_tibble |> 
  filter(column != "UID" & column != "UID_Ref")

summary_tibble_WoS$column <- factor(summary_tibble_WoS$column, levels = c("Citing_ID", "Cited_ID","Cited_Author", "Cited_Year", "Cited_Work", "Cited_Title"))
summary_tibble_WoS <-summary_tibble_WoS |> 
  mutate(column_adjust = column) |> # this will simplify our work next
  mutate(FROM = "Web of Science") 
```

```{r COMPLETENESS B&P SCOPUS, echo = FALSE, warning = FALSE}
# Completeness of data -----------------------------------------------------
df <- tibble(articles_and_references_special_philo_bio |> filter(citing_journal == "BIOLOGY AND PHILOSOPHY"))

# Create a tibble summarizing total rows, NA values, and non-NA values by column
summary_tibble <- tibble(
  column = names(df),
  total_rows = nrow(df),
  na_count = sapply(df, function(x)
    sum(is.na(x))),
  non_na_count = sapply(df, function(x)
    sum(!is.na(x)))
)

summary_tibble <-  summary_tibble |>  mutate(percent = non_na_count / total_rows *
                                               100) |> 
                                      mutate(across(percent, round, 3)) |> 
                                      arrange(desc(percent))

summary_tibble <- summary_tibble |> filter(column == "citing_id" | 
                                             column == "cited_id" | 
                                             column == "citing_journal" | 
                                             column == "citing_authors" | 
                                             column == "citing_title" | 
                                             column == "citing_year")

summary_tibble_scopus <- summary_tibble |> 
  mutate(column_adjust = c("Citing_ID", "Cited_ID", "Cited_Work", "Cited_Author", "Cited_Title", "Cited_Year"))

summary_tibble_scopus$column_adjust <- factor(summary_tibble_scopus$column_adjust, levels = c("Citing_ID", "Cited_ID", "Cited_Work","Cited_Author", "Cited_Year", "Cited_Title"))

summary_tibble_scopus <-summary_tibble_scopus |> mutate(FROM = "Scopus")
```

```{r COMPLETENESS WEB OF SCIENCE VS SCOPUS, echo = FALSE, warning = FALSE}
summary_tibble_all <- rbind(summary_tibble_scopus, summary_tibble_WoS)

summary_tibble_all |>
  hchart(type = "column", hcaes(x = column_adjust, y = percent, group = FROM)) |>
  hc_legend(enabled = T) 
```

Another reason why it can be interesting to choose Scopus is that it covers more journals in philosophy of biology such as *Biological Theory* (BT).

### *Biological Theory* Articles

Let's look at the article we are able to fetch with Scopus API compared to the articles listed on Springer for the [journal](https://link.springer.com/journal/13752/volumes-and-issues). We created a .csv counting manually all the articles listed on Springer for BT and compared it with what we got with the API.

```{r ALL DATABASES TOGETHER B.TH., echo = FALSE, warning = FALSE, message=FALSE}
bio_theory_papers <- articles_special_philo_bio_reformat |> 
  filter(citing_journal == "BIOLOGICAL THEORY") # 713

art_scopus_BT <- bio_theory_papers |> select(citing_id, citing_year) |> 
  distinct() |> 
  count(citing_year) |> 
  rename(N = n,
         YEAR = citing_year) 

art_scopus_BT <- art_scopus_BT |> mutate(FROM = "Scopus (articles only)")
art_springer_BT <- bio_th_db |> 
                    select(YEAR, ARTICLE, FROM) |>
                      rename(N = ARTICLE)

art_wos_BT <- tibble(FROM = "Web of Science (articles only)", N = 0, YEAR = 2024) 


art_all_BT <- rbind(art_scopus_BT, art_springer_BT, art_wos_BT)
```

The first step is to compare the coverage between Springer and Scopus. As we see, both are pretty close Springer getting a little bit less than 60 article more than Scopus.

```{r ALL DATABASES TOGETHER B.TH. TABLE}
#| renderings: [light, dark]
#Table

fct_DT(
  art_all_BT |>
  group_by(FROM) |>
  summarise(total_N = sum(N)) |>
  arrange(desc(total_N))
)


dt <- gt(art_all_BT) |> interactivity()
dt |> united_theme_gt()
dt |> slate_theme_gt()

```

When we look at the specific coverage for each year, we see that the coverage is pretty good. However, 2024 is a strange year where the coverage of Scopus is better than the one of Springer. We don't understand why at the moment.

```{r ALL DATABASES TOGHETER HISTOGRAM B.TH., echo = FALSE, warning = FALSE, message=FALSE}
color_map2 <- c("#ff572f", "#4e5c68")

art_all_BT_filtered <- art_all_BT |> filter(FROM != "Web of Science (articles only)") |>
  group_by(FROM, YEAR) |>
  summarise(N = sum(N))

highchart() |>
  hc_add_series(data = art_all_BT_filtered,
                   type = "column", hcaes(x = YEAR,
                   y = N, 
                   group = FROM)) |>
  hc_colors(color_map2)
```

### *Biological Theory* References

As we see, the coverage in Scopus resembles the one in Springer when it comes to articles.

Now, let's look at the references. For the journal *Biological Theory*, we get 35 793 references in total.

```{r CLEANING REFERENCES B.TH SCOPUS, echo = FALSE, warning = FALSE, message=FALSE}
bio_th_references <- articles_and_references_special_philo_bio |> filter(citing_journal == "BIOLOGICAL THEORY") # 36 525

clean_references_th <- bio_th_references |> add_count(cited_id) |> arrange(desc(n))
```

```{r COMPLETENESS OF DATA B.TH SCOPUS, echo = FALSE, warning = FALSE, message=FALSE}
# Completeness of data -----------------------------------------------------
df <- tibble(clean_references_th)

# Create a tibble summarizing total rows, NA values, and non-NA values by column
summary_tibble <- tibble(
  column = names(df),
  total_rows = nrow(df),
  na_count = sapply(df, function(x)
    sum(is.na(x))),
  non_na_count = sapply(df, function(x)
    sum(!is.na(x)))
)

summary_tibble <-  summary_tibble |>  mutate(percent = non_na_count / total_rows *
                                               100) |> 
                                      mutate(across(percent, round, 3)) |> 
                                      arrange(desc(percent))


summary_tibble <- summary_tibble |> filter(column == "citing_id" | 
                                             column == "cited_id" | 
                                             column == "cited_journal" | 
                                             column == "citing_authors" | 
                                             column == "citing_title" | 
                                             column == "citing_year")

summary_tibble <- summary_tibble |> 
  mutate(column_adjust = c("Citing_ID", "Cited_ID", "Cited_Author", "Cited_Work", "Cited_Title", "Cited_Year"))

summary_tibble$column_adjust <- factor(summary_tibble$column_adjust, levels = c("Citing_ID", "Cited_ID", "Cited_Work","Cited_Author", "Cited_Year", "Cited_Title"))
```

We have almost 100% non-na entries for a) Cited_Authors, b) Citing_ID, c) Cited_ID, d) Cited_Work which is either the article name or the book name. We should not be too bothered with the fact that the column Cited_Title as around 40% of NA entries since books do not have them typically.

Something that can look more bothersome is the Cited_Year column 40% of NA values. Looking into it, we can easily understand why there is so many NAs.The main reason is because Scopus has done before hand cleaning beforehand, notably for books that have many editions. You can demonstrate this by fetching the data directly from Scopus website and compare it to what we get with the API.

```{r COMPLETENESS HISTOGRAM B.TH. SCOPUS, echo = FALSE, warning = FALSE, message=FALSE}
summary_tibble |>
  hchart(type = "column", hcaes(x = column_adjust, y = percent), color = "#ff572f") |>
  hc_legend(enabled = T)
```

Lets look at an example. Here, we see that the famous book by Richard Dawkins *The Selfish Gene* has been referred to with different publication years (i.e. 1976 ans 1989). It is also the case for Odling-Smee et al. seminal work *Niche Construction: The Neglected Process in Evolution* which gets cited with two different year. If we look at the data from Scopus API we see that Dawkins book get no year attributed to it and that they many similar but different entries are under the same unique identifier (scopus_id).

```{r REGEX B.TH. SCOPUS, eval = FALSE, message = FALSE, warning = FALSE}
# REGEX FOR VARIOUS REFERENCES' EXTRACTION --------------------------------
# Define extraction patterns
extract_authors <- paste0(
  "^",                                         
  "(?:[A-Z]+(?:[-'][A-Z]+)*\\s+)*",  # Matches first part of author name allowing hyphens and apostrophes
  "(?:[A-Z]+(?:[-'][A-Z]+)*)",      # Matches last part of author name allowing hyphens and apostrophes
  "\\s+[A-Z](?:\\.[A-Z])*\\.",      # Matches initials (e.g., J. or J.A.)
  "(?:,\\s+",                                  
  "(?:[A-Z]+(?:[-'][A-Z]+)*\\s+)*",  # Matches first part of additional author names
  "(?:[A-Z]+(?:[-'][A-Z]+)*)",      # Matches last part of additional author names
  "\\s+[A-Z](?:\\.[A-Z])*\\.",      # Matches initials of additional authors
  ")*"                                         
)

extract_year <- "\\b(\\d{4})\\b"
extract_journal <- "[A-Z][A-Za-z\\s]+(?=\\,\\s\\d)" 
extract_volume <- "\\b\\d+\\b(?=\\,|\\s)" 
extract_issue <- "(?<=\\,\\s)(?:[A-Z])?\\d+(?=\\,|\\s|\\()|(?<=\\,\\s)[A-Z]\\d+(?=\\,|\\s|\\()"
extract_pages <- "\\bP{0,1}\\.\\s*\\d+(-\\d+)?\\b"

references_extract$references <- toupper(references_extract$references)


extraction <- function(ref) {
  # Extract components
  year <- str_extract(ref, extract_year)
  authors <- str_extract(ref, extract_authors)
  journal <- str_extract(ref, extract_journal)
  pages <- str_extract(ref, extract_pages)
  
  # Extract volume and issue separately
  volume_issue <- str_extract(ref, "\\b\\d{1,4}\\b(,\\s*\\d{1,4})?")
  
  # Split into volume and issue if both are present
  if (!is.na(volume_issue)) {
    volume_issue_split <- str_split(volume_issue, ",\\s*")[[1]]
    volume <- volume_issue_split[1]  # First part is the volume
    issue <- ifelse(length(volume_issue_split) > 1, volume_issue_split[2], NA)  # Second part is the issue, if it exists
  } else {
    volume <- NA
    issue <- NA
  }
  
  # Clean up formats
  year <- str_trim(year)
  pages <- ifelse(!is.na(pages), str_extract(pages, "\\d+(-\\d+)?"), NA)
  
  # Create a vector of extracted components
  extracted_parts <- c(authors, year, journal, volume, issue, pages)
  
  # Remove extracted parts and clean the remaining reference
  remaining_ref <- ref %>%
    str_remove_all(paste0(extracted_parts, collapse = "|")) %>%
    str_remove_all(",\\s*") %>%
    str_remove_all("\\s*\\(.*?\\)\\s*") %>%
    str_remove_all("P\\.\\s*|PP\\.\\s*") %>%
    str_remove_all("^\\s*|\\s*$") %>%
    str_trim()
  
  tibble(
    extracted_year = year,
    extracted_authors = authors,
    unique_author = authors, # This extra column is to get all unique author for later count. 
    extracted_journal = journal,
    extracted_volume = volume,
    extracted_issue = issue,
    extracted_pages = pages,
    remaining_ref = remaining_ref 
  )
}


# Apply the function and handle nested results
results <- references_extract %>%
  mutate(
    extraction_results = map(references, extraction)  # Apply function to each reference
  ) %>%
  unnest_wider(extraction_results)  # Unnest the tibble returned by `test_extraction`

#write_csv(results2, paste0(dir, "results2.csv"))
# View the results
fct_DT(results)

results_split <- results %>%
  separate_rows(unique_author, sep = ",\\s*")  # Split authors into multiple rows

# SAVE RESULTS ------------------------------------------------------------
write_csv(results, paste0(dir_od, "cleaned_ref.csv"))
write_csv(results_split, paste0(dir_od, "cleaned_ref_split.csv"))
```

```{r RESULTS B.TH. REGEX SCOPUS, echo = FALSE, warning=FALSE, message = FALSE}
# LOADING THE RESULTS PREVIOUSLY SAVED FROM LAST CHUNK
results <- read_csv(paste0(dir_od, "cleaned_ref.csv"))
results_split <- read_csv(paste0(dir_od, "cleaned_ref_split.csv"))
```

```{r RESULT TABLE B.TH. REGEX SCOPUS}
#| renderings: [light, dark]

count_ref_art <- results |> 
  filter(!is.na(extracted_authors)) |>
  select(extracted_authors, extracted_year, remaining_ref) |>
  add_count(remaining_ref, extracted_authors) |> 
  unique() |>
  arrange(desc(n))

fct_DT(count_ref_art)

dt <- gt(count_ref_art) |> interactivity()
light =  dt |> united_theme_gt()
dark =  dt |> slate_theme_gt()
```

```{r DAWKINS TABLE B.TH. SCOPUS, echo = FALSE}
#| renderings: [light, dark]

dawkins_tbl <- references_special_philo_bio_reformat |> 
  select(cited_id, cited_authors, cited_year, cited_journal, cited_title) |> 
  filter(!is.na(cited_id)) |> 
  filter(cited_id == "0004149207") |> distinct()

fct_DT(dawkins_tbl)

dt <- gt(dawkins_tbl) |> interactivity()
dt |> united_theme_gt()
dt |> slate_theme_gt()
```

## Openalex

If you are familiar with bibliometrics, then you might wonder why I have not talked about openalex. For those who do not know, openalex is an open-database that make it possible to access for free bibliometric data. However, for many reasons, we did not considered it for our inquiry. The first reason is that even if it is a promising database, there is still a lot of research about its robustness, especially when it comes to its metadata (some exceptions include @openalex

## Data

Now that we have checked that the coverage for got both articles and their references is satisfying, lets describe our corpus. We selected the four most important journals specialized in philosophy of biology :

```{r, warning=FALSE, message = FALSE}
articles_and_references_special_philo_bio <- read_csv(paste0(dir_data,"pybiblio/SPECIALIZED PHILOSOPHY OF BIOLOGY/articles_and_references_special_philo_bio.csv"))
articles_special_philo_bio_reformat <- read_csv(paste0(dir_data,"pybiblio/SPECIALIZED PHILOSOPHY OF BIOLOGY/articles_special_philo_bio_reformat.csv"))
articles_special_philo_bio_reformat <- articles_special_philo_bio_reformat |> filter(subtypeDescription == "ARTICLE")

articles_articles_and_references_special_philo_bio <- articles_and_references_special_philo_bio |> filter(citing_id %in% articles_special_philo_bio_reformat$citing_id)

```

```{r SUMMARY DATA, warning=FALSE, message = FALSE}
#| renderings: [light, dark]
summary_by_journal <- articles_articles_and_references_special_philo_bio |>
  group_by(citing_journal) |>
  summarize(
    Journal = unique(citing_journal),
    Articles = n_distinct(citing_id),
    References = n(),
  ) |>
  select(Journal, Articles, References) |>
  arrange(desc(Articles))

# Display with kable
fct_DT(summary_by_journal)

dt <- gt(summary_by_journal) |> interactivity()
dt |> united_theme_gt()
dt |> slate_theme_gt()
```

```{r PLOT SUMMARY, warning=FALSE, message = FALSE}
articles_and_references_philo <- articles_articles_and_references_special_philo_bio |> select(citing_journal, citing_year, citing_id) |> distinct()
articles_and_references_philo <- articles_and_references_philo |> group_by(citing_journal) |> 
  add_count(citing_year) |> 
  ungroup() |> 
  distinct()


articles_and_references_philo <- articles_and_references_philo |>
  mutate(citing_journal = case_when(
    citing_journal == "STUDIES IN HISTORY AND PHILOSOPHY OF SCIENCE PART C :STUDIES IN HISTORY AND PHILOSOPHY OF BIOLOGICAL AND BIOMEDICAL SCIENCES" ~ 
      "STUDIES IN HISTORY AND PHILOSOPHY OF SCIENCE PART C",
    TRUE ~ citing_journal
  ))
```

```{r}
#| renderings: [light, dark]

fig <- ggplot(articles_and_references_philo, aes(x = citing_year, y = n, group = citing_journal, color = citing_journal)) + 
  theme(
    panel.background = element_rect(fill = "gray90", color = NA),  # Force the gray background
    panel.grid.major = element_line(color = "white"),
    plot.title = element_text(hjust = 0.5, size = 15, face = "bold"),  # Centered & bold
    axis.title.x = element_text(size = 10),
    axis.title.y = element_text(size = 10),
    axis.text.y = element_text(size = 10),
    axis.text.x = element_text(size = 10),
    legend.position = "none") +   # Keep white gridlines
  geom_line(linewidth = 0.8, color = "darkgrey") +
  geom_smooth(linewidth = 1)  +  # You can change the theme if needed 
  facet_wrap(~citing_journal, nrow = 4) +
  xlab("Year") + 
  ylab("N. Articles Published")


ggplotly(fig + united_theme_gg) |> united_theme()  |> layout(showlegend = FALSE)
ggplotly(fig + slate_theme_gg) |> slate_theme() |> layout(showlegend = FALSE)

```

```{r}
#| renderings: [light, dark]

dir_bio <- "C:/Users/jacob/OneDrive - Universit\u00e9 Laval/biophilo/Data/pybiblio/BIOLOGY/bioRxiv/"
articles_and_references_bioRxiv <- read_csv(paste0(dir_bio, "articles_and_references_bioRxiv.csv"))


# PLOT ARTS AND REFS TROUGH TIME ------------------------------------------
## BIORXIV -----------------------------------------
count_art <-  articles_and_references_bioRxiv |> 
  select(citing_year, citing_id) |>
  distinct() |>
  group_by(citing_year) |> 
  count(name = "count_art") |> 
  arrange(-desc(count_art))


count_refs <- articles_and_references_bioRxiv |> 
  select(citing_year) |> 
  group_by(citing_year) |> 
  add_count(name = "count_refs") |> 
  arrange(-desc(count_refs)) |> distinct()


count_arts_refs <- left_join(count_art, count_refs, by = "citing_year") |> arrange(-desc(citing_year))


plot_art <- ggplot(count_arts_refs, aes(x = citing_year, y = count_art))+
  geom_smooth(se = TRUE, color = "#aa2c39",fill = "#aa2c39", linewidth = 1) +
  geom_line(color = "darkgray", linewidth = 0.5) + 
  labs(x = "Year", y = "Count", title = "Trends of BioRxiv Articles")+
  xlim(c(2013, 2024))

plot_refs <- ggplot(count_arts_refs, aes(x = citing_year, y = count_refs)) + 
  geom_smooth(se = TRUE, color = "#221f20", fill = "#221f20", linewidth = 1) +
  geom_line(color = "darkgray", linewidth = 0.5) + 
  labs(x = "Year", y = "Count", title = "Trends of BioRxiv References") +
  xlim(c(2013, 2024))

#fig <- plot_art+plot_refs # for a cleaner look but not interactive


fig <- subplot(plot_art, plot_refs)
fig |> united_theme()
fig |> slate_theme()


#ggplotly(fig + united_theme_gg) |> united_theme()
#ggplotly(fig + slate_theme_gg) |> slate_theme()

```

## Results

### Most cited references in *Philosophy of Biology*

```{r MOST CITED REFS B&P SCOPUS, warning=FALSE, message = FALSE}
#| renderings: [light, dark]


clean_references_bp <- references_special_philo_bio_reformat |> select(-citing_id)

most_c_ref_bp <- clean_references_bp |>  
  select(cited_id, cited_authors, cited_year, cited_journal, cited_title) |> add_count(cited_journal, cited_title, cited_authors, cited_id)  |> arrange(desc(n)) |> distinct() 

most_c_ref_bp <- fct_percent(most_c_ref_bp)
fct_DT(most_c_ref_bp |> select(-cited_id))

dt <- gt(most_c_ref_bp |> select(-cited_id)) |> interactivity()
dt |> united_theme_gt()
dt |> slate_theme_gt()
```

### Most cited journals in our corpus.

```{r MOST CITED JOURNALS B&P SCOPUS, warning=FALSE, message = FALSE}
cited_journals_bp <- clean_references_bp |> select(cited_id, cited_journal, cited_title) |> filter(!is.na(cited_journal)) |> count(cited_journal)  |> arrange(desc(n))

cited_journals_bp <- fct_percent(cited_journals_bp)
fct_DT(cited_journals_bp)
write_csv(cited_journals_bp, paste0(dir_od, "cited_journals_bp_2024-12-07.csv"))

```

### Most prominent keywords

```{r ARTICLES KEYWORDS B&P SCOPUS, warning=FALSE, message = FALSE}
keyword_bp <- articles_special_philo_bio_reformat |> select(citing_id, citing_authors, citing_year, authkeywords)

keyword_bp_cleaned <- keyword_bp |> 
  separate_rows(authkeywords, sep = " \\| ") |> 
  filter(!is.na(authkeywords)) 

keyword_bp_cleaned$authkeywords <- toupper(keyword_bp_cleaned$authkeywords)

# KEYWORD PLUS WORD CLOUD
keyword_bp_count <-  keyword_bp_cleaned |> 
 select(authkeywords) |> count(authkeywords, sort=TRUE)

keyword_bp_count <- fct_percent(keyword_bp_count)
fct_DT(keyword_bp_count)

```

### Word clouds

Now that we have these tables, it might be of use to visualize those keywords and their importance.

```{r ARTICLES WORLDLCOUD B&P SCOPUS, echo = FALSE, results='asis'}
wc_bp <- wordcloud2(keyword_bp_count, size = .7)

htmlwidgets::saveWidget(widget = wc_bp,
                        file = "wc_bp.html",
                        selfcontained = TRUE)
```

<iframe src="https://jacobhamelmottiez.github.io/WIPOB/wc_bp.html" width="800" height="500">

</iframe>

```{r}



wc_bp <- wordcloud2(keyword_bp_count, size = .7)
wc_bp_dark <- wordcloud2(keyword_bp_count, backgroundColor = "#292a31", size = .7)

wc_bp

```

```{r}
wc_bp_dark

```


### Citation delay

Here, we compute what we call citation delay. It is computed as the difference between the article publishing year and the mean year of the references the article cited. Here is the cumulative distribution function that shows the evolution of this citation delay as the journal gets older.

#### For all references

```{r , message = FALSE, warning = FALSE}
#| renderings: [light, dark]
# Citation delay ----------------------------------------------------------
# for all
dir_bio <- "C:/Users/jacob/OneDrive - Universit\u00e9 Laval/biophilo/Data/pybiblio/BIOLOGY/bioRxiv/"
articles_bioRxiv_reformat <- read_csv(paste0(dir_bio,"articles_bioRxiv_reformat.csv"))

delay_all_refs <- articles_articles_and_references_special_philo_bio |> mutate(delay = citing_year-cited_year)


delay_all_refs$decade <- cut(delay_all_refs$citing_year, 
                                              breaks = c(1986, 1996, 2006, 2016, 2026),  # Include up to 2024
                                              labels = c("1986-1995", "1996-2005", "2006-2015", "2016-2024"),
                                              right = FALSE)  # Left-inclusive


p1 <- ggplot(delay_all_refs |> filter(!is.na(decade)) |> filter(!cited_journal %in% articles_bioRxiv_reformat$citing_journal), aes(x = delay, color = decade, group = decade)) +
  stat_ecdf(geom = "step", show.legend = TRUE) +
  labs(title = "Citation Delay Philosophy of Biology (all references)",
       x = "Delay",
       y = "CDF") +
    theme(
    legend.position = "top",
    plot.title = element_text(hjust = 0.5, size = 15, face = "bold"),  # Centered & bold
    axis.title.x = element_text(size = 10),
    axis.title.y = element_text(size = 10),
    axis.text.y = element_text(size = 10),
    axis.text.x = element_text(size = 10))+
  scale_x_continuous(limits = c(0, 50)) 


ggplotly(p1 + united_theme_gg) |> united_theme()
ggplotly(p1 + slate_theme_gg) |> slate_theme()

```

#### Only for Biological References

```{r , message = FALSE, warning = FALSE}
#| renderings: [light, dark]

# only for biological references. 
delay_bio_refs <- delay_all_refs |> filter(cited_journal %in% articles_bioRxiv_reformat$citing_journal) # 31, 760 
delay_bio_refs <- delay_bio_refs |> mutate(citing_journal = case_when(
    citing_journal == "STUDIES IN HISTORY AND PHILOSOPHY OF SCIENCE PART C :STUDIES IN HISTORY AND PHILOSOPHY OF BIOLOGICAL AND BIOMEDICAL SCIENCES" ~ 
      "STUDIES IN HISTORY AND PHILOSOPHY OF SCIENCE",
    TRUE ~ citing_journal
  ))

p2 <- ggplot(delay_bio_refs |> filter(!is.na(decade)), aes(x = delay, color = decade, group = decade, fill = decade)) +
  stat_ecdf(geom = "step", linewidth = 1) +
  labs(title = "Citation Delay Philosophy of Biology (only references to biology)",
       x = "Delay",
       y = "Density",
       color = "Decade") + 
    theme(
    legend.position = "top",
    plot.title = element_text(hjust = 0.5, size = 15, face = "bold"),  # Centered & bold
    axis.title.x = element_text(size = 10),
    axis.title.y = element_text(size = 10),
    axis.text.y = element_text(size = 10),
    axis.text.x = element_text(size = 10)) +
  scale_x_continuous(limits = c(0, 50)) 

ggplotly(p2 + united_theme_gg) |> united_theme()
ggplotly(p2 + slate_theme_gg) |> slate_theme()

```

```{r , message = FALSE, warning = FALSE}
#| renderings: [light, dark]


p3 <- ggplot(delay_bio_refs |> filter(!is.na(decade)), aes(x = delay, color = decade, group = decade)) +
  stat_ecdf(geom = "step", show.legend = TRUE) +
  labs(title = "Citation Delay Philosophy of Biology (only references to biology)",
       x = "Delay",
       y = "Density") +
  theme(
    legend.position = "none",
    plot.title = element_text(hjust = 0.5, size = 15, face = "bold"),  # Centered & bold
    axis.title.x = element_text(size = 10),
    axis.title.y = element_text(size = 10),
    axis.text.y = element_text(size = 10),
    axis.text.x = element_text(size = 10)) +
  scale_x_continuous(limits = c(0, 50)) + 
  facet_wrap(~citing_journal) 

ggplotly(p3 + united_theme_gg) |> united_theme()
ggplotly(p3 + slate_theme_gg) |> slate_theme()

```

#### What is the distribution of the citations?

If this shift is interesting, we need to be careful. It could be only because as we go, we still cite old stuff, thus creating an artificial shift to the right not really problematic. Let's look at the distribution of citation delay.

```{r , message = FALSE, warning = FALSE}
#| renderings: [light, dark]
p4 <- ggplot(delay_bio_refs |> filter(!is.na(decade)), aes(x = delay, color = decade, group = decade)) +
  geom_density() +
  labs(title = "Citation Delay Philosophy of Biology",
       x = "Delay",
       y = "Density") +
  theme(
    legend.position = "none",
    plot.title = element_text(hjust = 0.5, size = 15, face = "bold"),  # Centered & bold
    axis.title.x = element_text(size = 10),
    axis.title.y = element_text(size = 10),
    axis.text.y = element_text(size = 10),
    axis.text.x = element_text(size = 10)) +
  scale_x_continuous(limits = c(0, 50)) 

ggplotly(p4 + united_theme_gg) |> united_theme()
ggplotly(p4 + slate_theme_gg) |> slate_theme()
```

```{r , message = FALSE, warning = FALSE}
#| renderings: [light, dark]
#Density
p5 <- ggplot(delay_bio_refs |> filter(!is.na(decade)), aes(x = delay, color = decade, group = decade)) +
  geom_density() +
  labs(title = "Citation Delay Philosophy of Biology",
       x = "Delay",
       y = "Density") +
  theme(
    legend.position = "none",
    plot.title = element_text(hjust = 0.5, size = 15, face = "bold"),  # Centered & bold
    axis.title.x = element_text(size = 10),
    axis.title.y = element_text(size = 10),
    axis.text.y = element_text(size = 10),
    axis.text.x = element_text(size = 10)) +
  scale_x_continuous(limits = c(0, 50)) + 
  facet_wrap(~citing_journal)


ggplotly(p5 + united_theme_gg) |> united_theme()
ggplotly(p5 + slate_theme_gg) |> slate_theme()
```

#### Visibility of Biology in Philosophy

```{r VISIBILITY PHILO -> BIO, message = FALSE, warning = FALSE}

# DATA --------------------------------------------------------------------
articles_and_references_special_philo_bio <- read_csv(paste0(dir_data,"pybiblio/SPECIALIZED PHILOSOPHY OF BIOLOGY/articles_and_references_special_philo_bio.csv"))
articles_and_references_bioRxiv <- read_csv(paste0(dir_data, "pybiblio/BIOLOGY/bioRxiv/articles_and_references_bioRxiv.csv"))
articles_and_references_bioRxiv <- articles_and_references_bioRxiv |> filter(citing_year != 2001 & citing_year !=2002)

articles_bioRxiv_reformat <- read_csv(paste0(dir_data, "pybiblio/BIOLOGY/bioRxiv/articles_bioRxiv_reformat.csv"))
refs_bio_bioRxiv <- read_csv(paste0(dir_data, "pybiblio/BIOLOGY/bioRxiv/references_bioRxiv_reformat.csv"))

articles_special_philo_bio_reformat <- read_csv(paste0(dir_data,"pybiblio/SPECIALIZED PHILOSOPHY OF BIOLOGY/articles_special_philo_bio_reformat.csv"))
references_special_philo_bio_reformat <- read_csv(paste0(dir_data, "pybiblio/SPECIALIZED PHILOSOPHY OF BIOLOGY/references_special_philo_bio_reformat.csv"))


# TOTAL ARTICLES PUBLISHED IN PHILOSOPHY OF BIOLOGY -----------------------
# Step 1: Tag what is from philo and what is from bio

journals_bio <- articles_bioRxiv_reformat |> distinct(citing_journal) # 4,361.
journals_philo <- articles_special_philo_bio_reformat |> distinct(citing_journal) # 4.
journals_philo <- journals_philo |> rbind("BIOL PHILOS")

philo_refs_tagged <- articles_and_references_special_philo_bio |> filter(citing_id %in% articles_special_philo_bio_reformat$citing_id) |> mutate(ref_bio = ifelse(cited_journal %in% journals_bio$citing_journal, TRUE, FALSE))
bio_refs_tagged <- articles_and_references_bioRxiv  |> 
  filter(citing_journal != "BIOLOGY AND PHILOSOPHY") |>
  mutate(ref_philo = ifelse(cited_journal %in% journals_philo$citing_journal, TRUE, FALSE))


# Step 2: Calculate ratios by year
philo_to_bio <- philo_refs_tagged |> 
  group_by(citing_year) %>%
  summarise(
    total = n(),
    to_bio = sum(ref_bio == TRUE, na.rm = TRUE),
    ratio = to_bio / total*100,
    citing_journal = citing_journal
  ) %>%
  mutate(direction = "Philosophy b Biology")

bio_to_philo <- bio_refs_tagged %>%
  group_by(citing_year) %>%
  summarise(
    total = n(),
    to_philo = sum(ref_philo, na.rm = TRUE),
    mean_cited = mean(cited_year, na.rm = TRUE),
    median_cited = median(cited_year, na.rm = TRUE),
    ratio = to_philo / total*100,
    citing_journal = citing_journal
  ) %>%
  mutate(direction = "Biology b Philosophy")
```

```{r CITATION RATIO, message = FALSE, warning = FALSE}
#| renderings: [light, dark]
# Step 4: Plot
fig <- ggplot(philo_to_bio |> filter(citing_year> 1986 & citing_year < 2025) |> select(citing_year, ratio, citing_journal) |> distinct(), aes(x = citing_year, y = ratio))+ #color = citing_journal)) +
  geom_line(linewidth = 2, color = "darkgrey") +
  geom_smooth(linewidth = 3) +
  labs(
    title = "Citations Towards Biology in Philosophy of Biology Over Time",
    x = "Citing Year",
    y = "Ratio of Refs. from Biology Over All Refs. in Philosophy of Biology"
  ) +
theme(
    legend.position = "none",
    plot.title = element_text(hjust = 0.5, size = 15, face = "bold"),  # Centered & bold
    axis.title.x = element_text(size = 10),
    axis.title.y = element_text(size = 10),
    axis.text.y = element_text(size = 10),
    axis.text.x = element_text(size = 10)
  )

ggplotly(fig + united_theme_gg) |> united_theme()
ggplotly(fig + slate_theme_gg) |> slate_theme()
  
```

Number of citations from philosophy to biology for each journal :

```{r, message = FALSE, warning = FALSE}
#| renderings: [light, dark]


# Step 4: Plot
fig <- ggplot(philo_to_bio |> filter(citing_year> 1986 & citing_year < 2025), aes(x = citing_year, y = ratio, color = citing_journal)) +
  geom_line(linewidth = 2, color = "darkgrey") +
  geom_smooth(linewidth = 3) +
  labs(
    title = "Citation Ratios Towards Biology in Philosophy of Biology Over Time",
    x = "Citing Year",
    y = "Ratio of References from Biology Over All References in Philosophy of Biology"
  ) +
theme(
    legend.position = "none",
    plot.title = element_text(hjust = 0.5, size = 15, face = "bold"),  # Centered & bold
    axis.title.x = element_text(size = 10),
    axis.title.y = element_text(size = 10),
    axis.text.y = element_text(size = 10),
    axis.text.x = element_text(size = 10)
) +
  facet_wrap(~citing_journal)


ggplotly(fig + united_theme_gg) |> united_theme() |> layout(showlegend = FALSE)
ggplotly(fig + slate_theme_gg) |> slate_theme() |> layout(showlegend = FALSE)
```

#### Visibility of Philosophy in Biology

```{r, message = FALSE, warning = FALSE}
#| renderings: [light, dark]


fig <- ggplot(bio_to_philo |> filter(citing_year > 2015 & citing_year < 2025) |> select(ratio, citing_year) |> distinct(), aes(x = citing_year, y = ratio)) +
  geom_line(size = 3, color = "blue") +
  geom_point() +
  labs(
    title = "Citations Towards Philosophy of Biology in Biology Over Time",
    x = "Citing Year",
    y = "Ratio of Refs. from Philosophy of Biology Over All References"
  )   + theme(
    legend.position = "none",
    plot.title = element_text(hjust = 0.5, size = 15, face = "bold"),  # Centered & bold
    axis.title.x = element_text(size = 10),
    axis.title.y = element_text(size = 10),
    axis.text.y = element_text(size = 10),
    axis.text.x = element_text(size = 10)
)
  
ggplotly(fig + united_theme_gg) |> united_theme()
ggplotly(fig + slate_theme_gg) |> slate_theme()

#p2 <- ggplot(bio_to_philo |> filter(citing_year > 2015 & citing_year < 2025), aes(x = citing_year, y = to_philo)) +
#  geom_line(size = 1, color = "red") +
#  geom_point() +
#  labs(
#    y = "Count",
#    x = " "
#  )



#(p2) / p + plot_layout(widths = c(2, 1), heights = unit(c(5, 1), c('cm', 'null')))
```


## Topic Modeling

This part of topic-modeling has been done in a distinct Jupyter Notebook to which you can have access here. For the sake of simplicity, I added here the main figures relevant for analysis.

We used the BERTopic algorithm developped by Grootendorst (2022). I skip the technical discussion about the algorithm for now. What is important for eventual replicability is the following : - We used the "all-MiniLM-L6-v2" embedding model to transform our abstract into vectors. - We used UMAP to reduce those high dimension vectors into 2D for vizualisation (hyperparameters : n_neighbors=5, n_components= 2, min_dist=0.0, metric='cosine', random_state=30). - We used HDBSCAN for clustering (hyperparameters : min_cluster_size=10, metric='euclidean', cluster_selection_method='eom', prediction_data=True).

### BERTopic for *Biology and Philosophy* only

We see that evolutionary related topics are predominant as Pradeu (2017) found. We also detect other important clusters such as cognitive sciences, Genetics and microbiology.

![](C:/Users/jacob/OneDrive%20-%20UniversitC)%20Laval/biophilo/Visualisation/BERTopic_biology_and_philosophy.png)

Here is a table with the count of articles per topic :

```{r}
#| renderings: [light, dark]

# Creating a tibble with the data from the image
table_data <- tibble(
  Topic = c("Evolutionary Theory", "Cognitive Science", "Ethics and Moral Philosophy", 
            "Taxonomy and Evolution", "Ecology", "Microbiology", 
            "Biodiversity and Conservation", "Language and Human Evolution", 
            "Animal Behavior", "Cultural Evolution"),
  Count = c(373, 80, 73, 61, 51, 40, 31, 27, 27, 25),
  Score = c(43.72801875732708, 9.378663540445487, 8.55830484656505, 
            7.151230949589683, 5.97889907033997, 4.6893317702227435, 
            3.6342321219226257, 3.1652989449003512, 3.1652989449003512, 
            2.9308323563892147)
)

# View the tibble

dt <- gt(table_data) |> interactivity()
dt |> united_theme_gt()
dt |> slate_theme_gt()

#datatable(table_data, 
          #options = list(scrollX = TRUE, paging = TRUE, pageLength = 10))

```

### BERTopic for all Philosophy of Biology :

Now, what happens when we look at all of philsophy of biology?

![](C:/Users/jacob/OneDrive%20-%20UniversitC)%20Laval/biophilo/Visualisation/map_philo_bio_update.png)

### Meta-Topics

However, we would like to know what are the meta-topics to quantify "how much" evolution is present in our copus.

```{r META-TOPICS, message = FALSE, warning = FALSE}
#| renderings: [light, dark]


# Create the list and tibble
meta_topic_links <- list(
  "Evolutionary Theory" = c(
    "Darwinian Evolution",
    " Evolutionary Explanations",
    " Fitness and Optimality",
    " Sexual Selection",
    " Evolutionary Economics",
    " Taxonomy and Phylogenetics",
    " Function and Etiology",
    " Cultural Evolution and Learning",
    " Cooperation and Social Evolution",
    " Ethics and Morality",
    " Language and Communication",
    " Reproduction and Gender",
    " Ecology",
    " Conservation and Biodiversity",
    " Botany",
    " Agriculture"
  ),
  "Cognitive Science & Psychology" = c(
    "Cognition",
    " Psychology",
    " Brain and Mind",
    " Emotions",
    " Agency"
  ),
  "Microbiology" = c(
    "Microbiome and Symbiosis"),
  
  "Molecular Biology and Genetics" = c(
    " Genetics",
    " Developmental Biology",
    " History of Science",
    " Race and Human Genetics"
  ),
  "Synthetic Biology and life" = c(
    "Synthetic Biology", " Life Origins"),
  
  "Medicine, Health & Disease" = c(
    "Psychiatric Disorders",
    " Infectious Disease",
    " COVID 19",
    " Aging and Healthcare",
    " Causality in Medicine",
    " Virology",
    " Cancer",
    " Physiology"
  ),
  "Other" = c(
    "Kant and Teleology",
    " Interdisciplinarity",
    " Mechanistic Modeling in Biology",
    " Biological Information",
    " Visual Representation"
    
    
    
  )
)

# Convert the list into a tibble
meta_topic_df <- tibble::enframe(meta_topic_links, name = "Meta_Topic", value = "Topics")

# Render the datatable
dt <- gt(meta_topic_df) |> interactivity()

dt |> united_theme_gt()
dt |> slate_theme_gt()

#datatable(meta_topic_df, 
 #         options = list(scrollX = TRUE, paging = TRUE, pageLength = 7))

```

```{r META-TOPICS PLOT, message = FALSE, warning = FALSE}
#| renderings: [light, dark]
meta_topics <- tibble(
  MetaTopic = c("Cognitive Science & Psychology", "Evolutionary Theory", 
                "History and Philosophy of Science", "Medicine, Health & Disease", 
                "Microbiology", "Molecular Biology and Genetics", "Other"),
  Count = c(246, 1097, 224, 229, 86, 157, 123),
  Percent = c(11.378353376503238, 50.74005550416282, 10.360777058279371, 
              10.5920440333025, 3.9777983348751156, 7.261794634597594, 5.689176688251619)
)



p <- ggplot(meta_topics, aes(x = reorder(MetaTopic, Percent), y = Percent, color = MetaTopic, fill = MetaTopic)) + 
  geom_col() +
  coord_flip() + 
  labs(title = "Meta-Topic in Philosophy of Biology (%)") + 
  scale_y_continuous(labels = function(x) paste0(x, "%")) +
  theme(
    legend.position = "none",
    plot.title = element_text(hjust = 0.5, size = 15, face = "bold"),  # Centered & bold
    axis.title.x = element_text(size = 10),
    axis.title.y = element_text(size = 10),
    axis.text.y = element_text(size = 10),
    axis.text.x = element_text("none")
  )




ggplotly(p + united_theme_gg) |> united_theme() |> layout(showlegend = FALSE)
ggplotly(p + slate_theme_gg) |> slate_theme() |> layout(showlegend = FALSE)
```

### Interactive Map

**For the curious mind who would like to test out interactively this map please click** [here](https://jacobhamelmottiez.github.io/WIPOB/BERTopic_philo_of_biology.html). I uploaded also some of the information from this notebook to [*Github*](https://github.com/JacobHamelMottiez/WIPOB).

```{=html}
<script>
document.addEventListener("DOMContentLoaded", function() {
  const headers = document.querySelectorAll("h1");
  headers.forEach(header => {
    const hr = document.createElement("hr");
    hr.style.border = "1px solid #ccc";
    hr.style.marginTop = "10px";
    hr.style.marginBottom = "20px";
    header.insertAdjacentElement("afterend", hr);
  });
});
</script>
```
