---
title: "Chapitre 1 : Quelle relation pour la philosophie et les sciences ?"
date: 2025-04-28
author:
  - name: Jacob Hamel-Mottiez
    id: jhm
    orcid: 0009-0007-3666-908X
    email: jacob.hamel-mottiez.1@ulaval.ca
    affiliation: 
      - name: Laval University

abstract:
    Annexe technique pour le chapitre 2. 

execute: 
  freeze: auto  # re-render only when source changes
  #enabled: true # This is so that Plotly is rendered. 
format: 
  html:
    code-fold: true
    toc: true
    number-sections: true
    fig_width: 100%   # Width will be 100% of the container
    fig_height: 500   # Height in pixels
keywords:
  - Philosophy of Biology
  - Biology
  - Bibliometrics
  - Topic modeling
  - BERTopic

brand:
  light: "C:/Users/jacob/OneDrive - Université Laval/quarto-light-dark-experiments/united-brand.yml"
  dark: "C:/Users/jacob/OneDrive - Université Laval/quarto-light-dark-experiments/slate-brand.yml"

license: "CC BY"
copyright: 
  holder: Jacob Hamel-Mottiez
  year: 2024
funding: "The author received funding from the Social Sciences and Humanities Canadian Reseach Council (SSHCRC) as well as from the Fonds de recherche du Québec - Société et culture."
---


```{r}
#| echo: false
#| warning: false

# PACKAGES ----------------------------------------------------------------
library(dplyr)
library(refinr)
library(DT)
library(data.table)
library(readr)
library(ggplot2)
require(patchwork)
library(ggplot2)
library(ggrepel)
library(readxl)
library(tidyverse)
```
## Add copy-paste to plotly
```{r}
set.seed(666L)
asd <- data.frame(
  week = c(1, 2, 3, 4, 5, 6, 7, 8), 
  a    = rpois(8L, 30), 
  b    = rpois(8L, 25)
)
js <- c(
  'function(gd) {',
  '  Plotly.Snapshot.toImage(gd, {format: "png"}).once(',
  '    "success",',
  '    async function(url) {',
  '      try {',
  '        const data = await fetch(url);',
  '        const blob = await data.blob();',
  '        await navigator.clipboard.write([',
  '          new ClipboardItem({',
  '            [blob.type]: blob',
  '          })',
  '        ]);',
  '        console.log("Image copied.");',
  '        var $div = $("<div>Image copied to clipboard</div>");',
  '        $div.css({',
  '          display: "none",',
  '          position: "absolute",',
  '          top: "5%",',
  '          left: "50%",',
  '          transform: "translate(-50%, 0)",',
  '          "font-size": "30px",',
  '          "font-family": "Tahoma, sans-serif",',
  '          "font-style": "italic",',
  '          "background-color": "seashell",',
  '          padding: "10px",',
  '          border: "2px solid black",',
  '          "border-radius": "5px"',
  '        });',
  '        $div.appendTo("body");',
  '        $div.fadeIn(3000, function() {',
  '          $div.fadeOut(3000);',
  '        });',
  '      } catch(err) {',
  '        console.error(err.name, err.message);',
  '      }',
  '    }',
  '  );',
  '}'
)
SVGicon_path <- paste0(
  "M97.67,20.81L97.67,20.81l0.01,0.02c3.7,0.01,7.04,1.51,9.46,3.93c2.4,2.",
  "41,3.9,5.74,3.9,9.42h0.02v0.02v75.28 v0.01h-0.02c-0.01,3.68-1.51,7.03-",
  "3.93,9.46c-2.41,2.4-5.74,3.9-9.42,3.9v0.02h-0.02H38.48h-0.01v-0.02 c-3",
  ".69-0.01-7.04-1.5-9.46-3.93c-2.4-2.41-3.9-5.74-3.91-9.42H25.1c0-25.96,",
  "0-49.34,0-75.3v-0.01h0.02 c0.01-3.69,1.52-7.04,3.94-9.46c2.41-2.4,5.73",
  "-3.9,9.42-3.91v-0.02h0.02C58.22,20.81,77.95,20.81,97.67,20.81L97.67,20",
  ".81z M0.02,75.38L0,13.39v-0.01h0.02c0.01-3.69,1.52-7.04,3.93-9.46c2.41",
  "-2.4,5.74-3.9,9.42-3.91V0h0.02h59.19 c7.69,0,8.9,9.96,0.01,10.16H13.4h",
  "-0.02v-0.02c-0.88,0-1.68,0.37-2.27,0.97c-0.59,0.58-0.96,1.4-0.96,2.27h",
  "0.02v0.01v3.17 c0,19.61,0,39.21,0,58.81C10.17,83.63,0.02,84.09,0.02,75",
  ".38L0.02,75.38z M100.91,109.49V34.2v-0.02h0.02 c0-0.87-0.37-1.68-0.97-",
  "2.27c-0.59-0.58-1.4-0.96-2.28-0.96v0.02h-0.01H38.48h-0.02v-0.02c-0.88,",
  "0-1.68,0.38-2.27,0.97 c-0.59,0.58-0.96,1.4-0.96,2.27h0.02v0.01v75.28v0",
  ".02h-0.02c0,0.88,0.38,1.68,0.97,2.27c0.59,0.59,1.4,0.96,2.27,0.96v-0.0",
  "2h0.01 h59.19h0.02v0.02c0.87,0,1.68-0.38,2.27-0.97c0.59-0.58,0.96-1.4,",
  "0.96-2.27L100.91,109.49L100.91,109.49L100.91,109.49 L100.91,109.49z"
)
CopyToClipboard <- list(
  name = "Copy",
  icon = list(
    path   = SVGicon_path,
    width  = 111,
    height = 123
  ),
  click = htmlwidgets::JS(js)
)
plot_ly(
  asd, x = ~week, y = ~a, name = "a", type = "scatter", mode = "lines"
) %>%
  add_trace(y = ~b, name = "b", mode = "lines") %>%
  layout(
    margin = list(l = 100, r = 100, b = 100, t = 100), 
    xaxis = list(
      title     = "Week", 
      showgrid  = FALSE, 
      rangemode = "normal"
    ),
    yaxis = list(
      title     = "", 
      showgrid  = FALSE, 
      rangemode = "tozero"
    ),
    hovermode = "x unified"
  ) %>%
  config(modeBarButtonsToAdd = list(CopyToClipboard))
```
<!--# Dark theme plotly settings -->
```{r DARK THEME PLOTLY}
#| echo: false
#| warning: false

library(plotly)

plotly_brand <- function(brand_yml, title, x, y) {
  brand <- yaml::yaml.load_file(brand_yml)
  return (
    function(plot)
      plot |> layout(
        paper_bgcolor = brand$color$background,
        plot_bgcolor = brand$color$background,
        title = list(font = list(
          color = brand$color$foreground, size = 20
        )),
        # Plot title font
        xaxis = list(
          titlefont = list(color = brand$color$foreground, size = 16),
          # x-axis title font
          tickfont = list(color = brand$color$foreground, size = 14)      # x-axis tick font
        ),
        yaxis = list(
          titlefont = list(color = brand$color$foreground, size = 16),
          # y-axis title font
          tickfont = list(color = brand$color$foreground, size = 14)      # y-axis tick font
        )
      )
  )
}
      
      

united_theme <- plotly_brand('C:/Users/jacob/OneDrive - Université Laval/quarto-light-dark-experiments/united-brand.yml')
slate_theme <- plotly_brand('C:/Users/jacob/OneDrive - Université Laval/quarto-light-dark-experiments/slate-brand.yml')

```

<!--# Dark theme ggplot settings -->
```{r DARK THEME ggplot2}
#| warning: false

ggplot_theme_colors <- function(bgcolor, fgcolor) {
  theme_minimal(base_size = 11) %+%
    theme(
      panel.border = element_blank(),
      #panel.grid.major.y = element_line(colour = fgcolor),
      panel.grid.minor.y = element_line(colour = fgcolor),
      #panel.grid.major.x = element_line(colour = fgcolor),
      panel.grid.minor.x = element_line(colour = fgcolor),
      text = element_text(colour = fgcolor),
      axis.text = element_text(colour = fgcolor),
      rect = element_rect(colour = bgcolor, fill = bgcolor),
      plot.background = element_rect(fill = bgcolor, colour = NA),
      #axis.line = element_line(colour = fgcolor),
      axis.ticks = element_line(colour = fgcolor), 
      strip.text = element_text(colour = fgcolor)
    )
}

ggplot_theme_brand <- function(brand_yml) {
  brand <- yaml::yaml.load_file(brand_yml)
  ggplot_theme_colors(brand$color$background, brand$color$foreground)
}

united_theme_gg<- ggplot_theme_brand('C:/Users/jacob/OneDrive - Université Laval/quarto-light-dark-experiments/united-brand.yml')
slate_theme_gg <- ggplot_theme_brand('C:/Users/jacob/OneDrive - Université Laval/quarto-light-dark-experiments/slate-brand.yml')
```

<!--# Tables setting -->
```{r DARK THEME gt}

#| echo: false
#| warning: false

gt_theme_colors <- function(bg, fg)
  (function(table)
    table |>
    tab_options(
      table.background.color=bg,
      table.font.color=fg,
    )
  )


gt_theme_brand <- function(brand_yml) {
  brand <- yaml::yaml.load_file(brand_yml)
  gt_theme_colors(brand$color$background, brand$color$foreground)
}
united_theme_gt <- gt_theme_brand('C:/Users/jacob/OneDrive - Université Laval/quarto-light-dark-experiments/united-brand.yml')
slate_theme_gt <- gt_theme_brand('C:/Users/jacob/OneDrive - Université Laval/quarto-light-dark-experiments/slate-brand.yml')

interactivity  <- function(data) {
  opt_interactive(data,
  use_search = TRUE,
  use_filters = FALSE,
  use_resizers = TRUE,
  use_highlight = TRUE,
  use_compact_mode = FALSE,
  use_text_wrapping = TRUE,
  use_page_size_select = FALSE,
  page_size_default = 10,
  page_size_values = c(10, 25, 50, 100),
  pagination_type = c("numbers", "jump", "simple"),
  height = "auto"
)
}
```

```{r}
#| warning: false
#| message: false
#| renderings: [light,dark]

# LOADING DATA ------------------------------------------------------------
dir <- "C:/Users/jacob/OneDrive - Université Laval/Mon ordinateur portable/RSTUDIO/Data/"


pins_authors <- read_excel("C:/Users/jacob/OneDrive - Université Laval/Mon ordinateur portable/RSTUDIO/Data/PinS_Table.xlsx")


# DATA MANIPULATION -------------------------------------------------------
pins_authors <- pins_authors %>% separate_longer_delim(Authors, delim = ";")
pins_authors_unique <- pins_authors |> arrange(Authors) |> unique() # N = 298

# SAVING 
#xlsx::write.xlsx(pins_authors_unique, "C:/Users/jacob/Dropbox/PC/Desktop/RSTUDIO/Data/PinS_Table_authors_unique.xlsx")

# MOST PRODUCTIVE Discipline PINS -----------------------------------------
PinS_Discipline_year <- read_excel(paste0(dir,"PinS_Discipline_year.xlsx"))
PinS_Discipline_year <- data.table(PinS_Discipline_year)
PinS_Discipline_year[, N := .N, by = Discipline]

# All Years
plot <- ggplot(PinS_Discipline_year, aes(x = reorder(Discipline, N), color = Discipline, fill = Discipline)) + 
  geom_histogram(stat = "count") + 
  labs(title = "PinS Articles per Discipline", x = "Discipline", y = "Count")


ggplotly(plot + united_theme_gg) |> united_theme() |> layout(showlegend = F, xaxis = list(tickangle=45))
ggplotly(plot + slate_theme_gg) |> slate_theme() |> layout(showlegend = F, xaxis = list(tickangle=45))


```


```{r}
#| renderings: [light,dark]
# Each Decades
PinS_Discipline_year[, N_year := .N, by = .(Discipline, Year)] # This is for each year.
time_window <- seq(1970, 2017, 10)


# Function for time window
for(i in 1:(length(time_window))){
  if(time_window[i] == 2010){
    PinS_Discipline_year[Year >= 2010, 
                start_window := 2010]}
  else{
    PinS_Discipline_year[Year >= time_window[i] & Year < time_window[i+1], 
                start_window := time_window[i]]
  }
}

PinS_Discipline_year[, N_window := .N, by =.(Discipline, start_window)] # This is for each decade. 
#unique(PinS_Discipline_year[, .(start_window,N_window), by = Discipline]) # The decades where there is 0 citation are missing.

# Missing values. 
# g <- ggplot(PinS_Discipline_year, aes(x = start_window, y = N_window, 
#                                       color = Discipline, fill = Discipline, group = Discipline)) + 
#   geom_point(size = 3) +
#   geom_smooth(method = "loess")
# ggplotly(g)


start_window <- seq(1970, 2017, 10)
PinS_Discipline_plus <- expand_grid(start_window, unique(PinS_Discipline_year$Discipline)) 
PinS_Discipline_plus <- PinS_Discipline_plus |> arrange(`unique(PinS_Discipline_year$Discipline)`)
PinS_Discipline_plus <- rename(PinS_Discipline_plus, Discipline = `unique(PinS_Discipline_year$Discipline)`)

PinS_Discipline_year$N_year <- NULL
PinS_Discipline_year$Year <- NULL

PinS_Discipline_plus <- left_join(PinS_Discipline_plus,PinS_Discipline_year, by = c("Discipline", "start_window")) |> unique()
PinS_Discipline_plus <- PinS_Discipline_plus %>% replace(is.na(.), 0)
STEM <- c("Computers", "Engineering", "Logic", "Mathematics", "Physics", "Earth and Atmospheric Science")

health <- c("Biology", "Medicine", "Neuroscience", "Psychiatry")
STEM_disc <- PinS_Discipline_plus |> filter(Discipline %in% STEM) |> mutate(is_STEM = TRUE)
health_disc <- PinS_Discipline_plus |> filter(Discipline %in% health) |> mutate(is_STEM = FALSE)
PinS_Discipline_plus <- rbind(STEM_disc, health_disc)
PinS_Discipline_plus <- rename(PinS_Discipline_plus, Discipline = Discipline)

PinS_Discipline_plus <- PinS_Discipline_plus |> mutate(Discipline = case_when(
    Discipline == "Earth and Atmospheric Science" ~ "Earth Sciences",
    TRUE ~ Discipline  # This ensures that all other values remain unchanged
))
## ALL Discipline GGPLOT ---------------------------------------------------
A <- ggplot(PinS_Discipline_plus, aes(x = start_window, 
                                      y = N_window, 
                                      color = Discipline, 
                                      fill = Discipline, 
                                      group = Discipline)) + 
  geom_point(size = 2) +
  geom_smooth(linewidth = 1)



## Health GGPLOT -----------------------------------------------------------
health_disc <- PinS_Discipline_plus |> filter(Discipline %in% health)
H <- ggplot(health_disc, aes(x = start_window, 
                             y = N_window, 
                             color = Discipline, 
                             fill = Discipline, 
                             group = Discipline)) + 
  geom_point(size = 2) +
  geom_smooth(linewidth = 1)



## STEM GGPLOT -------------------------------------------------------------
STEM_disc <- PinS_Discipline_plus |> filter(Discipline %in% STEM)
S <- ggplot(STEM_disc, aes(x = start_window, 
                             y = N_window, 
                             color = Discipline, 
                             fill = Discipline, 
                             group = Discipline)) + 
  geom_point(size = 2) +
  geom_smooth(linewidth = 1)



## FACET HEALTH VS STEM ----------------------------------------------------
A <- ggplot(PinS_Discipline_plus, aes(x = start_window, 
                                      y = N_window,
                                      color = Discipline)) + 
  geom_point(size = 2) +
  geom_smooth() +
  #theme_bw()+
  facet_grid(cols = vars(is_STEM), labeller = labeller(is_STEM = c("FALSE" = "Health Disciplines", "TRUE" = "STEM Disciplines"))) +
  labs(color = NULL, x = "Decade", y = "N. of Articles")

      
      ggplotly(A + united_theme_gg) |> united_theme()
ggplotly(A + slate_theme_gg) |> slate_theme()


```
For figure in my master's thesis
```{r}
ggplotly(A) |> layout(xaxis = list(size = 40), legend = list(itemsizing='constant',
  font = list(size = 20))) |> config(modeBarButtonsToAdd = list(CopyToClipboard))
```


